@page "/"
@inherits ViewComponentBase<IndexViewModel>
@using ElectronNET.API
@using Stark.Extensions
@using Stark.DataAccessLayer
@using Stark.Models

@if (this.ViewModel.Errors != null
  && this.ViewModel.Errors.Count > 0)
{
    <div class="container">
        <ul class="list-group borderless">
            @foreach (string error in this.ViewModel.Errors)
            {
                <li class="pd-0 list-group-item list-group-item-danger align-content-center borderless">@error</li>
            }
        </ul>
    </div>
}
<div class="container-fluid">
    <div class="row">
        <div class="col-3">
            <div class="form-group">
                <label>Target Server</label>
                <input class="form-control" type="text" @bind-value="this.ViewModel.TargetServer" />
            </div>
        </div>
        <div class="col-3">
            <div class="form-group">
                <label>From Date:</label>
                <input class="form-control" type="datetime" @bind-value="this.ViewModel.FilterStartDate" />
            </div>
        </div>
        <div class="col-3">
            <label>To Date:</label>
            <input class="form-control" type="datetime" @bind-value="this.ViewModel.FilterEndDate" />
        </div>
        <div class="col-3">
            <label>Log Type:</label>
            <select class="form-control" @onchange="OnLogTypeChanged">
                @foreach (LogTypeEnum logtype in Enum.GetValues(typeof(LogTypeEnum)).Cast<LogTypeEnum>())
                {
                    <option value="@logtype">@logtype.GetDisplayName()</option>
                }
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            <label>Filter Text:</label>
            <input class="form-control" type="text" @bind-value="this.ViewModel.FilterText" />
        </div>
        <div class="col-3">
            <div class="align-content-center">
                <input class="fixed-checkbox" type="checkbox" @bind-value="this.ViewModel.UseExternalCredentials" />
                <label class="fixed-check-label">Use alternate credentials?</label>
            </div>
        </div>
        @if (this.ViewModel.UseExternalCredentials)
        {
            <div class="col-3">
                <label>Username:</label>
                <input class="form-control" type="text" @bind-value="this.ViewModel.UserName" />
            </div>
            <div class="col-3">
                <label>Password</label>
                <input class="form-control" type="password" @bind-value="this.ViewModel.Password" />
            </div>
        }
        else
        {
            <div class="col-6">

            </div>
        }
    </div>
    <div class="row">
        <div class="button-row">
            <button class="btn btn-sm btn-primary" @onclick="(async () => await this.ViewModel.GetLogListAsync())">Execute</button>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="card-body borderless">
        <div class="row border-top">
            @if (this.ViewModel.LogViewModels != null)
            {
                <p>Result Count: @this.ViewModel.LogViewModels.Count</p>
            }
        </div>
        <div class="row">
            <div class="col-12">
                <table class="log-table">
                    <thead>
                        <tr>
                            <th>Date/Time @if (this.ViewModel.LogViewModels.Count > 0) {<button class="btn btn-sm" @onclick="(async () => await this.SortColumn(nameof(LogModel.TimeGenerated)))"><i class="@(GetCurrentSortClassForColumn(nameof(LogModel.TimeGenerated)))"></i></button>}</th>
                            <th>Log Type @if (this.ViewModel.LogViewModels.Count > 0) {<button class="btn btn-sm" @onclick="(async () => await this.SortColumn(nameof(LogModel.Type)))"><i class="@(GetCurrentSortClassForColumn(nameof(LogModel.Type)))"></i></button>}</th>
                            <th>Source @if (this.ViewModel.LogViewModels.Count > 0) {<button class="btn btn-sm" @onclick="(async () => await this.SortColumn(nameof(LogModel.SourceName)))"><i class="@(GetCurrentSortClassForColumn(nameof(LogModel.SourceName)))"></i></button>}</th>
                            <th>Event Code @if (this.ViewModel.LogViewModels.Count > 0) {<button class="btn btn-sm" @onclick="(async () => await this.SortColumn(nameof(LogModel.EventCode)))"><i class="@(GetCurrentSortClassForColumn(nameof(LogModel.EventCode)))"></i></button>}</th>
                            <th class="no-align">Message @if (this.ViewModel.LogViewModels.Count > 0) {<button class="btn btn-sm" @onclick="(async () => await this.SortColumn(nameof(LogModel.Message)))"><i class="@(GetCurrentSortClassForColumn(nameof(LogModel.Message)))"></i></button>}</th>
                        </tr>
                    </thead>
                    @if (this.ViewModel.IsLoading)
                    {
                        <tr>
                            <td colspan="5" align="center">
                                <div class="align-content-center">
                                    <LoadingComponent />
                                </div>
                            </td>
                        </tr>
                    }
                    else if (!this.ViewModel.IsLoading && this.ViewModel.LogViewModels != null)
                    {
                        foreach (var log in this.ViewModel.LogViewModels)
                        {
                            string trclass = "";
                            switch (log.Type)
                            {
                                case "Error":
                                    trclass = "table-danger";
                                    break;
                                case "Warning":
                                    trclass = "table-warning";
                                    break;
                                default:
                                    break;
                            }

                            <tr class="@trclass border-bottom" @onclick="(e) => CopyLogToClipboard(e, log)">
                                <td class="minwidth150 align-content-center"><span class="text-monospace logtext">@log.TimeGenerated.ToString("yyyy-MM-dd HH:MM:ss")</span></td>
                                <td class="minwidth150 align-content-center"><span class="text-monospace logtext">@log.Type</span></td>
                                <td class="minwidth200 align-content-center"><span class="text-monospace logtext">@log.SourceName</span></td>
                                <td class="minwidth150 align-content-center"><span class="text-monospace logtext">@log.EventCode</span></td>
                                <td><span class="text-monospace logtext" @onclick:stopPropagation="true">
                                        @((MarkupString)this.FormatLogMessage(log.GetMessageString()))
                                        @{
                                            if (log.ShowReadMoreAndLessButtons)
                                            {
                                                if (log.ShowReadMoreText)
                                                {
                                                    <button class="btn btn-sm btn-link" @onclick="(() => { log.ShowReadMoreText = !log.ShowReadMoreText; StateHasChanged(); })" @onclick:stopPropagation="true">[Read More]</button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-sm btn-link" @onclick="(() => { log.ShowReadMoreText = !log.ShowReadMoreText; StateHasChanged(); })" @onclick:stopPropagation="true">[Read Less]</button>
                                                }
                                            }
                                        }
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                </table>
            </div>
        </div>
    </div>
</div>

<div class="alert alert-success copied-alert @transitionClass">
    <span class="">Copied to clipboard!</span>
</div>

@code{
    const string HtmlBreak = "<br />";
    const int ShortenedMessageLength = 100;
    const string sortDown = "-down";
    const string sortUp = "-up";

    System.Timers.Timer copiedTextShowTimer;
    string transitionClass = "";
    float displayForSeconds = 3;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.copiedTextShowTimer = new System.Timers.Timer();
        copiedTextShowTimer.Interval = displayForSeconds * 1000;
        copiedTextShowTimer.Elapsed += OnCopiedTextShowTimerElapsed;
    }

    private void OnCopiedTextShowTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        copiedTextShowTimer.Stop();
        transitionClass = "";
        InvokeAsync(StateHasChanged);
    }

    public void CopyLogToClipboard(MouseEventArgs e, LogViewModel log)
    {
        if (e.Button != 0)
        {
            return;
        }

        Electron.Clipboard.WriteText(log.LogModel.ToJson());
        copiedTextShowTimer.Start();
        transitionClass = "copied-alert-active";
    }

    private void OnLogTypeChanged(ChangeEventArgs args)
    {
        if (Enum.TryParse(typeof(LogTypeEnum), args?.Value?.ToString(), out object outval))
        {
            this.ViewModel.LogType = (LogTypeEnum)outval;
        }
    }

    private string FormatLogMessage(string message)
    {
        // Not all new line characters are captured with a simple replace of Environment.NewLine,
        // so we check them all and replace them with HTML breaks. If this produces bad results,
        // we'll come up with a smarter way to parse. This should cover all relevant cases
        // in the meantime though.
        return message
            .Replace(Environment.NewLine, HtmlBreak)
            .Replace("\r\n", HtmlBreak)
            .Replace("\r", HtmlBreak)
            .Replace("\n", HtmlBreak);
    }

    private async Task SortColumn(string property)
    {
        await this.ViewModel.SortByProperty(property);
    }

    private string GetCurrentSortClassForColumn(string property)
    {
        string classString = "fas fa-sort";

        if (this.ViewModel.CurrentSortProperty?.Equals(property, StringComparison.InvariantCultureIgnoreCase) ?? false)
        {
            classString += (this.ViewModel.SortDirectionDown) ? "-down" : "-up";
        }

        return classString;
    }
}